# Resolve issue of accessing s3 from secure network in databricks
# Process:
# Seeds live in public s3 bucket
# In a notebook, I read those and write to a Volume
# I get the seed config ymls from the open source dbt project via git clone and they populate in my Workspace/.../project/seed folder.
# write the config ymls to the Volume from my workspace so that I can point my seed path to the Volume and it work like a normal dbt project
# I reference the column names in the yml configs to set the csv headers from s3

# you need to set your volume where you will save your seeds
# you will need the yml files in your workspace
# you will run this file in the main project directory (next to dbt_project.yml)

%pip install fsspec 
%pip install s3fs
dbutils.library.restartPython()

import gzip
import os
import pandas as pd
import yaml

csv_url = f"s3://tuva-public-resources/"
storage_nm = "/Volumes/<your volume>/seeds/"
update = True
version = "0.14.11"

tuva_dir_dict = {
    "clinical_concept_library": {
        "clinical_concept_library__clinical_concepts": [f"versioned_value_sets/{version}", "tuva_clinical_concepts.csv_0_0_0.csv.gz"],
        "clinical_concept_library__coding_systems": [f"versioned_value_sets/{version}", "tuva_coding_systems.csv_0_0_0.csv.gz"],
        "clinical_concept_library__value_set_members": [f"versioned_value_sets/{version}", "tuva_value_set_members.csv_0_0_0.csv.gz"]
    },
    "reference_data": {
        "reference_data__code_type": [f"versioned_terminology/{version}", "code_type.csv_0_0_0.csv.gz"],
        "reference_data__ansi_fips_state": ["versioned_terminology/0.14.1", "ansi_fips_state.csv_0_0_0.csv.gz"],
        "reference_data__calendar": [f"versioned_terminology/{version}", "calendar.csv_0_0_0.csv.gz"],
        "reference_data__fips_county": [f"versioned_terminology/{version}", "fips_county.csv_0_0_0.csv.gz"],
        "reference_data__ssa_fips_state": [f"versioned_terminology/{version}", "ssa_fips_state.csv_0_0_0.csv.gz"]
    },
    "terminology": {
        "terminology__admit_source": [f"versioned_terminology/{version}", "admit_source.csv_0_0_0.csv.gz"],
        "terminology__admit_type": [f"versioned_terminology/{version}", "admit_type.csv_0_0_0.csv.gz"],
        "terminology__apr_drg": [f"versioned_terminology/{version}", "apr_drg.csv_0_0_0.csv.gz"],
        "terminology__bill_type": [f"versioned_terminology/{version}", "bill_type.csv_0_0_0.csv.gz"],
        "terminology__claim_type": [f"versioned_terminology/{version}", "claim_type.csv_0_0_0.csv.gz"],
        "terminology__ccs_services_procedures": [f"versioned_terminology/{version}", "ccs_services_procedures.csv_0_0_0.csv.gz"],
        "terminology__discharge_disposition": [f"versioned_terminology/{version}", "discharge_disposition.csv_0_0_0.csv.gz"],
        "terminology__encounter_type": [f"versioned_terminology/{version}", "encounter_type.csv_0_0_0.csv.gz"],
        "terminology__ethnicity": [f"versioned_terminology/{version}", "ethnicity.csv_0_0_0.csv.gz"],
        "terminology__gender": [f"versioned_terminology/{version}", "gender.csv_0_0_0.csv.gz"],
        "terminology__hcpcs_level_2": [f"versioned_terminology/{version}", "hcpcs_level_2.csv_0_0_0.csv.gz"],
        "terminology__hcpcs_to_rbcs": [f"versioned_terminology/{version}", "hcpcs_to_rbcs.csv_0_0_0.csv.gz"],
        "terminology__icd_10_cm": [f"versioned_terminology/{version}", "icd_10_cm.csv_0_0_0.csv.gz"],
        "terminology__icd_10_pcs": [f"versioned_terminology/{version}", "icd_10_pcs.csv_0_0_0.csv.gz"],
        "terminology__icd10_pcs_cms_ontology": [f"versioned_terminology/{version}", "icd_10_pcs_cms_ontology.csv_0_0_0.csv.gz"],
        "terminology__icd_9_cm": [f"versioned_terminology/{version}", "icd_9_cm.csv_0_0_0.csv.gz"],
        "terminology__icd_9_pcs": [f"versioned_terminology/{version}", "icd_9_pcs.csv_0_0_0.csv.gz"],
        "terminology__loinc": [f"versioned_terminology/{version}", "loinc.csv_0_0_0.csv.gz"],
        "terminology__loinc_deprecated_mapping": [f"versioned_terminology/{version}", "loinc_deprecated_mapping.csv_0_0_0.csv.gz"],
        "terminology__mdc": ["versioned_terminology/0.14.1", "mdc.csv_0_0_0.csv.gz"],
        "terminology__medicare_dual_eligibility": [f"versioned_terminology/{version}", "medicare_dual_eligibility.csv_0_0_0.csv.gz"],
        "terminology__medicare_orec": [f"versioned_terminology/{version}", "medicare_orec.csv_0_0_0.csv.gz"],
        "terminology__medicare_status": [f"versioned_terminology/{version}", "medicare_status.csv_0_0_0.csv.gz"],
        "terminology__ms_drg_weights_los": [f"versioned_terminology/{version}", "ms_drg_weights_los.csv_0_0_0.csv.gz"],
        "terminology__ms_drg": [f"versioned_terminology/{version}", "ms_drg.csv_0_0_0.csv.gz"],
        "terminology__ndc": [f"versioned_terminology/{version}", "ndc.csv_0_0_0.csv.gz"],
        "terminology__nitos": [f"versioned_terminology/{version}", "nitos.csv_0_0_0.csv.gz"],
        "terminology__other_provider_taxonomy": [f"versioned_provider_data/{version}", "other_provider_taxonomy.csv_0_0_0.csv.gz"],
        "terminology__payer_type": [f"versioned_terminology/{version}", "payer_type.csv_0_0_0.csv.gz"],
        "terminology__place_of_service": [f"versioned_terminology/{version}", "place_of_service.csv_0_0_0.csv.gz"],
        "terminology__present_on_admission": [f"versioned_terminology/{version}", "present_on_admission.csv_0_0_0.csv.gz"],
        "terminology__provider": [f"versioned_provider_data/{version}", "provider.csv_0_0_0.csv.gz"],
        "terminology__race": [f"versioned_terminology/{version}", "race.csv_0_0_0.csv.gz"],
        "terminology__revenue_center": [f"versioned_terminology/{version}", "revenue_center.csv_0_0_0.csv.gz"],
        "terminology__rxnorm_to_atc": [f"versioned_terminology/{version}", "rxnorm_to_atc.csv_0_0_0.csv.gz"],
        "terminology__rxnorm_brand_generic": [f"versioned_terminology/{version}", "rxnorm_brand_generic.csv_0_0_0.csv.gz"],
        "terminology__snomed_ct": [f"versioned_terminology/{version}", "snomed_ct_compressed.csv.gz"],
        "terminology__snomed_ct_transitive_closures": [f"versioned_terminology/{version}", "snomed_ct_transitive_closures_compressed.csv.gz"],
        "terminology__snomed_icd_10_map": [f"versioned_terminology/{version}", "snomed_icd_10_map.csv_0_0_0.csv.gz"],
    },
    "value_sets": {
        "ccsr": {
            "ccsr__dxccsr_v2023_1_body_systems": [f"versioned_value_sets/{version}", "dxccsr_v2023_1_body_systems.csv_0_0_0.csv.gz"],
            "ccsr__dxccsr_v2023_1_cleaned_map": [f"versioned_value_sets/{version}", "dxccsr_v2023_1_cleaned_map.csv_0_0_0.csv.gz"],
            "ccsr__prccsr_v2023_1_cleaned_map": [f"versioned_value_sets/{version}", "prccsr_v2023_1_cleaned_map.csv_0_0_0.csv.gz"]
        },
        "chronic_conditions": {
            "chronic_conditions__cms_chronic_conditions_hierarchy": ["versioned_value_sets/0.14.1", "cms_chronic_conditions_hierarchy.csv_0_0_0.csv.gz"],
            "chronic_conditions__tuva_chronic_conditions_hierarchy": ["versioned_value_sets/0.14.1", "tuva_chronic_conditions_hierarchy.csv_0_0_0.csv.gz"]
        },
        "cms_hcc": {
            "cms_hcc__adjustment_rates": [f"versioned_value_sets/{version}", "cms_hcc_adjustment_rates.csv_0_0_0.csv.gz"],
            "cms_hcc__cpt_hcpcs": [f"versioned_value_sets/{version}", "cms_hcc_cpt_hcpcs.csv_0_0_0.csv.gz"],
            "cms_hcc__demographic_factors": [f"versioned_value_sets/{version}", "cms_hcc_demographic_factors.csv_0_0_0.csv.gz"],
            "cms_hcc__disabled_interaction_factors": [f"versioned_value_sets/{version}", "cms_hcc_disabled_interaction_factors.csv_0_0_0.csv.gz"],
            "cms_hcc__disease_factors": [f"versioned_value_sets/{version}", "cms_hcc_disease_factors.csv_0_0_0.csv.gz"],
            "cms_hcc__disease_hierarchy": [f"versioned_value_sets/{version}", "cms_hcc_disease_hierarchy.csv_0_0_0.csv.gz"],
            "cms_hcc__disease_interaction_factors": [f"versioned_value_sets/{version}", "cms_hcc_disease_interaction_factors.csv_0_0_0.csv.gz"],
            "cms_hcc__enrollment_interaction_factors": [f"versioned_value_sets/{version}", "cms_hcc_enrollment_interaction_factors.csv_0_0_0.csv.gz"],
            "cms_hcc__icd_10_cm_mappings": [f"versioned_value_sets/{version}", "cms_hcc_icd_10_cm_mappings.csv_0_0_0.csv.gz"],
            "cms_hcc__payment_hcc_count_factors": [f"versioned_value_sets/{version}", "cms_hcc_payment_hcc_count_factors.csv_0_0_0.csv.gz"]
        },
        "data_quality": {
            "data_quality__crosswalk_field_info": [f"versioned_value_sets/{version}", "data_quality_crosswalk_field_info.csv_0_0_0.csv.gz"],
            "data_quality__crosswalk_field_to_mart": [f"versioned_value_sets/{version}", "data_quality_crosswalk_field_to_mart.csv_0_0_0.csv.gz"],
            "data_quality__crosswalk_mart_to_outcome_measure": [f"versioned_value_sets/{version}", "data_quality_crosswalk_mart_to_outcome_measure.csv_0_0_0.csv.gz"],
            "data_quality__crosswalk_measure_reasonable_ranges": [f"versioned_value_sets/{version}", "data_quality_crosswalk_measure_reasonable_ranges.csv_0_0_0.csv.gz"],
            "data_quality__reference_mart_analytics": [f"versioned_value_sets/{version}", "data_quality_reference_mart_analytics.csv_0_0_0.csv.gz"]
        },
        "ed_classification": {
            "ed_classification__categories": [f"versioned_value_sets/{version}", "ed_classification_categories.csv_0_0_0.csv.gz"],
            "ed_classification__icd_10_cm_to_ccs": [f"versioned_value_sets/{version}", "icd_10_cm_to_ccs.csv_0_0_0.csv.gz"],
            "ed_classification__johnston_icd10": [f"versioned_value_sets/{version}", "johnston_icd10.csv_0_0_0.csv.gz"],
            "ed_classification__johnston_icd9": [f"versioned_value_sets/{version}", "johnston_icd9.csv_0_0_0.csv.gz"]
        },
        "hcc_suspecting": {
            "hcc_suspecting__clinical_concepts": [f"versioned_value_sets/{version}", "hcc_suspecting_clinical_concepts.csv_0_0_0.csv.gz"],
            "hcc_suspecting__hcc_descriptions": [f"versioned_value_sets/{version}", "hcc_suspecting_descriptions.csv_0_0_0.csv.gz"],
            "hcc_suspecting__icd_10_cm_mappings": [f"versioned_value_sets/{version}", "hcc_suspecting_icd_10_cm_mappings.csv_0_0_0.csv.gz"]
        },
        "pharmacy": {
            "pharmacy__rxnorm_generic_available": [f"versioned_value_sets/{version}", "rxnorm_generic_available.csv_0_0_0.csv.gz"]
        },
        "quality_measures":   {
            "quality_measures__concepts": [f"versioned_value_sets/{version}", "quality_measures_concepts.csv_0_0_0.csv.gz"],
            "quality_measures__measures": [f"versioned_value_sets/{version}", "quality_measures_measures.csv_0_0_0.csv.gz"],
            "quality_measures__value_sets": [f"versioned_value_sets/{version}", "quality_measures_value_set_codes.csv_0_0_0.csv.gz"]
        },
        "readmissions": {
            "readmissions__acute_diagnosis_ccs": [f"versioned_value_sets/{version}", "acute_diagnosis_ccs.csv_0_0_0.csv.gz"],
            "readmissions__acute_diagnosis_icd_10_cm": [f"versioned_value_sets/{version}", "acute_diagnosis_icd_10_cm.csv_0_0_0.csv.gz"],
            "readmissions__always_planned_ccs_diagnosis_category": [f"versioned_value_sets/{version}", "always_planned_ccs_diagnosis_category.csv_0_0_0.csv.gz"],
            "readmissions__always_planned_ccs_procedure_category": [f"versioned_value_sets/{version}", "always_planned_ccs_procedure_category.csv_0_0_0.csv.gz"],
            "readmissions__exclusion_ccs_diagnosis_category": [f"versioned_value_sets/{version}", "exclusion_ccs_diagnosis_category.csv_0_0_0.csv.gz"],
            "readmissions__icd_10_cm_to_ccs": [f"versioned_value_sets/{version}", "icd_10_cm_to_ccs.csv_0_0_0.csv.gz"],
            "readmissions__icd_10_pcs_to_ccs": [f"versioned_value_sets/{version}", "icd_10_pcs_to_ccs.csv_0_0_0.csv.gz"],
            "readmissions__potentially_planned_ccs_procedure_category": [f"versioned_value_sets/{version}", "potentially_planned_ccs_procedure_category.csv_0_0_0.csv.gz"],
            "readmissions__potentially_planned_icd_10_pcs": [f"versioned_value_sets/{version}", "potentially_planned_icd_10_pcs.csv_0_0_0.csv.gz"],
            "readmissions__specialty_cohort": [f"versioned_value_sets/{version}", "specialty_cohort.csv_0_0_0.csv.gz"],
            "readmissions__surgery_gynecology_cohort": [f"versioned_value_sets/{version}", "surgery_gynecology_cohort.csv_0_0_0.csv.gz"]
        },
        "service_categories": {
            "service_category__service_categories": [f"versioned_value_sets/{version}", "service_category__service_categories.csv_0_0_0.csv.gz"]
        }
    }
}


def copy_seed_ymls_to_storage(write_dir, storage_nm):
    yml_src = "./seeds/"
    print(f"{yml_src}{write_dir}")
    for yml_file in os.listdir(f"{yml_src}{write_dir}"):
        try:
            dbutils.fs.ls(f"{storage_nm}{write_dir}{yml_file}")
        except Exception as e:
            if "java.io.FileNotFoundException" in str(e):
                with open(f"{storage_nm}{write_dir}{yml_file}", "wb") as f_out:
                    with open(f"{yml_src}{write_dir}{yml_file}", "rb") as f_in:
                        f_out.write(f_in.read())
                # dbutils.fs.cp(f"{yml_src}{write_dir}{yml_file}", f"{storage_nm}{write_dir}{yml_file}")
                print(f"{storage_nm}{write_dir}{yml_file}")
                dbutils.fs.ls(f"{storage_nm}{write_dir}{yml_file}")
            else:
                raise e

def get_csv_headers_from_yml(write_dir, storage_nm, write_file):
    yml_src = "./seeds/"
    seed_name = write_file.split(".csv")[0]
    print(seed_name)
    for yml_file in os.listdir(f"{yml_src}{write_dir}"):
        with open(f"{yml_src}{write_dir}{yml_file}", "r") as file:
            config = yaml.safe_load(file)
            for seed in config['seeds']:
                if seed['name'] == seed_name:
                    return list(seed['config']['column_types'].keys())

def read_write_s3(read_url, write_dir, write_file, storage_nm):
    print(read_url)
    # get headers from ymls
    headers = get_csv_headers_from_yml(write_dir, storage_nm, write_file)
    # multi level directory
    bottom_dir = write_dir.split(".csv")[0]
    if "/" in bottom_dir:
        bottom_dir = bottom_dir.split("/")[-2]
    else:
        bottom_dir = bottom_dir.split("/")[-1]
    if len(bottom_dir) > 0:
        write_file = f"{bottom_dir}__" + write_file.replace(f"{bottom_dir}__", "")
        
    try:
        df = pd.read_csv(read_url, compression="gzip", storage_options={"anon": True}, dtype=str, header=None)
    except gzip.BadGzipFile:
        df = pd.read_csv(read_url, dtype=str, header=None)
    df.replace("\\N", "", inplace=True)
    
    # write df to storage
    try:
        dbutils.fs.ls(f"{storage_nm}{write_dir}")
    except Exception as e:
        # add directory
        if "java.io.FileNotFoundException" in str(e):
            dbutils.fs.mkdirs(f"{storage_nm}{write_dir}")
        else:
            raise e
    
    copy_seed_ymls_to_storage(write_dir, storage_nm)
    print(headers)
    df.columns = headers

    try:
        # if file already exists
        dbutils.fs.ls(f"{storage_nm}{write_dir}{write_file}")
        df.to_csv(f"{storage_nm}{write_dir}{write_file}", index=False)    
    except Exception as e:
        if "java.io.FileNotFoundException" in str(e):
            df.to_csv(f"{storage_nm}{write_dir}{write_file}", index=False)
        else:
            raise e

if update:
    for dir1, seed1 in tuva_dir_dict.items():
        
        if type(seed1)==dict:
            for dir2, seed2 in seed1.items():
                if type(seed2)==dict:
                    for dir3, seed3 in seed2.items():
                        if type(seed3)==dict:
                            raise("Need another level")
                        else:
                            read_url = csv_url + seed3[0] + "/" + seed3[1]
                            write_url = dir1 + "/" + dir2 + "/"
                            read_write_s3(read_url, write_url, dir3 + ".csv", storage_nm)
                else:
                    read_url = csv_url + seed2[0] + "/" + seed2[1]
                    write_url = dir1 + "/"
                    read_write_s3(read_url, write_url, dir2 + ".csv", storage_nm)
        else:
            read_url = csv_url + seed1[0] + "/" + seed1[1]
            write_url = ""
            read_write_s3(read_url, write_url, dir1 + ".csv", storage_nm)
